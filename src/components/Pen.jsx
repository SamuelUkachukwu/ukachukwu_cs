/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";

import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { useThree } from "@react-three/fiber";

gsap.registerPlugin(ScrollTrigger);

export function Pen(props) {
    const penRef = useRef();
    const { viewport } = useThree();

    useEffect(() => {
        if (!penRef.current) return;
        let targetX = viewport.width / 2 - (viewport.width / 10) * 1.7;

        const tl = gsap.timeline({
            scrollTrigger: {
                trigger: "#contact",
                start: "top top",
                end: "+=200%",
                scrub: 1,
                //markers: true,
            },
        });
        tl.to(
            penRef.current.position,
            {
                x: 0,
                y: -(viewport.height / 2) * 0.2,
                duration: 0.5,
                ease: "power2.out",
            },
            0
        ).to(
            penRef.current.rotation,
            { z: -Math.PI / 2, duration: 0.5, ease: "power2.out" },
            0
        );

        // 2. Spin (rotate around Y)
        tl.to(
            penRef.current.rotation,
            { y: -Math.PI, duration: 1.2, ease: "power2.inOut" },
            0
        );

        tl.to(
            penRef.current.position,
            { x: targetX, duration: 1, ease: "power2.inOut" },
            0.2
        );

        // 4. Tilt forward (Z and X rotation)
        tl.to(
            penRef.current.rotation,
            { x: -0.2, z: -1.2, duration: 1.5, ease: "power2.inOut" },
            0.3
        );

        return () => {
            tl.scrollTrigger.kill();
            tl.kill();
        };
    }, [viewport.height, viewport.width]);

    const { nodes, materials } = useGLTF("/pen.glb");
    return (
        //this was removed from the group with ref: scale={[0.95, 0.95, 0.95]} no changes detected yet
        <group ref={penRef} {...props} dispose={null}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube024.geometry}
                material={materials.plastic}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube024_1.geometry}
                material={materials.marble}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube024_2.geometry}
                material={materials.gold}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube024_3.geometry}
                material={materials.black_metal}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube024_4.geometry}
                material={materials.silver}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube024_5.geometry}
                material={materials["glass.002"]}
            />
        </group>
    );
}

useGLTF.preload("/pen.glb");
